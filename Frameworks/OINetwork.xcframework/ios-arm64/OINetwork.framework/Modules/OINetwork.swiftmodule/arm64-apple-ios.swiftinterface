// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OINetwork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Foundation
import OICommons
@_exported import OINetwork
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct FCTypeFaceModel {
  public var codigo: Swift.String?
  public var imagem: Swift.String?
}
public struct FCUserModel {
  public var user: Swift.String?
  public var pass: Swift.String?
  public var cpf: Swift.String?
  public var name: Swift.String?
  public var birth: Swift.String?
  public var privateKey: Swift.String?
  public var image: UIKit.UIImage?
  public init(_ user: Swift.String, _ pass: Swift.String, _ cpf: Swift.String, _ name: Swift.String, _ birth: Swift.String, _ overlapImage: UIKit.UIImage? = nil)
}
public struct FCPrivateKeyModel {
  public var token: Swift.String?
  public var expires: Swift.String?
}
public struct FCCaptchaModel {
  public var appkey: Swift.String?
  public var chkey: Swift.String?
  public var images: Swift.String?
  public var fcvarUrlbase: Swift.String?
  public init(appkey: Swift.String? = nil, chkey: Swift.String? = nil, images: Swift.String? = nil, fcvarUrlbase: Swift.String? = nil)
}
public typealias FCManagerChallengeResultCallback = (_ value: OINetwork.FCResultModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerValidResultCallback = (_ value: OINetwork.FCValidCaptchaModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerPrivateKeyResultCallback = (_ value: OINetwork.FCPrivateKeyModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerSessionResultCallback = (_ value: OINetwork.FCSessionModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerSuccessCallback = (_ success: Swift.Bool, _ error: Swift.Error?, _ httpCode: Swift.Int?) -> Swift.Void
public typealias FCManagerInitializerResultCallback = (_ value: OINetwork.FCInitializationModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerSession3DResultCallback = (_ value: OINetwork.FCSession3DModel?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManager3DLivenessResultCallback = (_ value: OINetwork.Liveness3DSuccess?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerResultCallback = (_ value: Swift.String?, _ error: Swift.Error?) -> Swift.Void
public typealias FCManagerAppKeyCallback = (_ appKey: Swift.String?) -> Swift.Void
public typealias FCManagerPayloadCallback = (_ value: Swift.String?, _ error: Swift.Error?) -> Swift.Void
public protocol FCManagerProtocol {
  func verifyCertifaceOnline(consumerKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  func verifyAppKey(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  func createPrivateKey(consumerKey: Swift.String, model: OINetwork.FCUserModel, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerPrivateKeyResultCallback)
  func createSession(consumerKey: Swift.String, model: OINetwork.FCUserModel, token: OINetwork.FCPrivateKeyModel, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSessionResultCallback)
  func fetchAllCaptchaCallenge(consumerKey: Swift.String, model: OINetwork.FCBaseModel, appkey: Swift.String, completion: @escaping (OINetwork.FCResultModel?, Swift.Error?) -> Swift.Void)
  func validateCaptchaChallenge(consumerKey: Swift.String, model: OINetwork.FCCaptchaModel, completion: @escaping OINetwork.FCManagerValidResultCallback)
  func sendDocument(consumerKey: Swift.String, images: [Swift.String], appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  func sendDocument(consumerKey: Swift.String, images: [Swift.String], ticket: Swift.String, appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  func initializeSDKLiveness(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerInitializerResultCallback)
  func create3DSession(consumerKey: Swift.String, appKey: Swift.String, userAgent: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSession3DResultCallback)
  func verifyLiveness3D(consumerKey: Swift.String, userAgent: Swift.String, appkey: Swift.String, faceScan: Swift.String, image auditTrailImage: Swift.String, lowQualityImage lowQualityAuditTrailImage: Swift.String, sessionId: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManager3DLivenessResultCallback)
  func postSDKStatus(of payload: OINetwork.Payloadable, with baseUrl: Swift.String, consumerKey: Swift.String)
  func postPayload(_ payload: OINetwork.Payloadable, endpoint: Swift.String, baseUrl: Swift.String, consumerKey: Swift.String, completion: @escaping OINetwork.FCManagerPayloadCallback)
  func credential(consumerKey: Swift.String, user: Swift.String, passcode: Swift.String, completion: @escaping OINetwork.FCManagerResultCallback)
  func generateAppkey(consumerKey: Swift.String, user: Swift.String, token: Swift.String, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OINetwork.FCManagerResultCallback)
  func generateAppkey(consumerKey: Swift.String, user userProvided: Swift.String?, passcode passcodeProvided: Swift.String?, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OINetwork.FCManagerAppKeyCallback)
}
public protocol Payloadable {
  var appKey: Swift.String { get }
  func createPayload() -> OINetwork.Payload
}
public struct Payload {
  public init(appKey: Swift.String, fields: [Swift.String : Any?])
  public func toJsonObject() -> [Swift.String : Any]
}
public struct FCValidCaptchaModel {
  public var valid: Swift.Bool?
  public var codID: Swift.Double?
  public var cause: Swift.String?
  public var uidProtocol: Swift.String?
}
@_hasMissingDesignatedInitializers public class FCManager {
  public static let shared: OINetwork.FCManagerProtocol
  @objc deinit
}
extension OINetwork.FCManager : OINetwork.FCManagerProtocol {
  public func verifyCertifaceOnline(consumerKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  public func verifyAppKey(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  public func createPrivateKey(consumerKey: Swift.String, model: OINetwork.FCUserModel, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerPrivateKeyResultCallback)
  public func createSession(consumerKey: Swift.String, model: OINetwork.FCUserModel, token: OINetwork.FCPrivateKeyModel, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSessionResultCallback)
  public func fetchAllCaptchaCallenge(consumerKey: Swift.String, model: OINetwork.FCBaseModel, appkey: Swift.String, completion: @escaping (OINetwork.FCResultModel?, Swift.Error?) -> Swift.Void)
  public func validateCaptchaChallenge(consumerKey: Swift.String, model: OINetwork.FCCaptchaModel, completion: @escaping OINetwork.FCManagerValidResultCallback)
  public func sendDocument(consumerKey: Swift.String, images: [Swift.String], appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  public func sendDocument(consumerKey: Swift.String, images: [Swift.String], ticket: Swift.String, appKey: Swift.String, baseUrl: Swift.String, completion: @escaping OINetwork.FCManagerSuccessCallback)
  public func initializeSDKLiveness(consumerKey: Swift.String, appKey: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerInitializerResultCallback)
  public func create3DSession(consumerKey: Swift.String, appKey: Swift.String, userAgent: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManagerSession3DResultCallback)
  public func verifyLiveness3D(consumerKey: Swift.String, userAgent: Swift.String, appkey: Swift.String, faceScan: Swift.String, image auditTrailImage: Swift.String, lowQualityImage lowQualityAuditTrailImage: Swift.String, sessionId: Swift.String, baseUrl fcvarUrlbase: Swift.String, completion: @escaping OINetwork.FCManager3DLivenessResultCallback)
  public func postSDKStatus(of payload: OINetwork.Payloadable, with baseUrl: Swift.String, consumerKey: Swift.String)
  public func postPayload(_ payload: OINetwork.Payloadable, endpoint: Swift.String, baseUrl: Swift.String, consumerKey: Swift.String, completion: @escaping OINetwork.FCManagerPayloadCallback)
  public func credential(consumerKey: Swift.String, user: Swift.String, passcode: Swift.String, completion: @escaping OINetwork.FCManagerResultCallback)
  public func generateAppkey(consumerKey: Swift.String, user: Swift.String, token: Swift.String, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OINetwork.FCManagerResultCallback)
  public func generateAppkey(consumerKey: Swift.String, user userProvided: Swift.String? = nil, passcode passcodeProvided: Swift.String? = nil, cpf: Swift.String, name: Swift.String, birthdate: Swift.String, completion: @escaping OINetwork.FCManagerAppKeyCallback)
}
public struct FCSessionModel {
  public var appkey: Swift.String?
}
public struct FCSession3DModel {
  public let sessionToken: Swift.String?
}
public struct FCInitializationModel {
  public var productionKey: Swift.String?
}
public struct FCChallengeModel {
  public var mensagem: Swift.String?
  public var grayscale: Swift.Bool?
  public var tempoEmSegundos: Swift.Int?
  public var tipoFace: OINetwork.FCTypeFaceModel?
}
public struct Liveness3DSuccess {
  public var valid: Swift.Bool?
  public var codID: Swift.Double?
  public var cause: Swift.String?
  public var protocolo: Swift.String?
  public var scanResultBlob: Swift.String?
}
public struct FCBaseModel {
  public var appkey: Swift.String?
  public var fcvarUrlbase: Swift.String?
  public var p: Swift.String?
  public static let K_APP_KEY: Swift.String
  public static let K_P: Swift.String
  public init(appkey: Swift.String? = nil, fcvarUrlbase: Swift.String? = nil, p: Swift.String? = nil)
}
public func fatalError(_ message: @autoclosure () -> Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
public struct FatalErrorUtil {
  public static func replaceFatalError(closure: @escaping (Swift.String, Swift.StaticString, Swift.UInt) -> Swift.Void)
  public static func restoreFatalError()
}
public struct FCResultModel {
  public var chkey: Swift.String?
  public var snapNumber: Swift.Int?
  public var snapFrequenceInMillis: Swift.Int?
  public var challenges: [OINetwork.FCChallengeModel]?
  public func totalNumberOfPictures() -> Swift.Int
}
